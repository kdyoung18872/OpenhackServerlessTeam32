{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "sql_1_Connection_Name": {
      "type": "string",
      "defaultValue": "sql"
    },
    "sql_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "team32sql team32sql.database.windows.net"
    },
    "sql_1_server": {
      "type": "string",
      "metadata": {
        "description": "SQL server name"
      }
    },
    "sql_1_database": {
      "type": "string",
      "metadata": {
        "description": "SQL database name"
      }
    },
    "sql_1_username": {
      "type": "securestring",
      "metadata": {
        "description": "Username credential"
      }
    },
    "sql_1_password": {
      "type": "securestring",
      "metadata": {
        "description": "Password credential"
      }
    },
    "sql_1_encryptConnection": {
      "type": "bool",
      "metadata": {
        "description": "Encrypt Connection"
      }
    },
    "sql_1_privacySetting": {
      "type": "string",
      "metadata": {
        "description": "Privacy Setting"
      },
      "allowedValues": [
        "None",
        "Private",
        "Organizational",
        "Public"
      ]
    },
    "sql_1_sqlConnectionString": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Connection String"
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Condition": {
              "actions": {
                "Response": {
                  "inputs": {
                    "body": "@body('Execute_a_SQL_query_(V2)_2')?['resultsets']['Table1']",
                    "statusCode": 200
                  },
                  "runAfter": {},
                  "type": "Response"
                }
              },
              "else": {
                "actions": {
                  "Response_2": {
                    "inputs": {
                      "body": "Content not found",
                      "statusCode": 204
                    },
                    "kind": "Http",
                    "runAfter": {},
                    "type": "Response"
                  }
                }
              },
              "expression": {
                "or": [
                  {
                    "equals": [
                      "@empty(body('Execute_a_SQL_query_(V2)_2')?['resultsets'])",
                      "@false"
                    ]
                  }
                ]
              },
              "runAfter": {
                "Execute_a_SQL_query_(V2)_2": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "Condition_2": {
              "actions": {
                "Response_3": {
                  "inputs": {
                    "body": "Bad Data",
                    "statusCode": 400
                  },
                  "kind": "Http",
                  "runAfter": {},
                  "type": "Response"
                },
                "Terminate": {
                  "inputs": {
                    "runStatus": "Succeeded"
                  },
                  "runAfter": {
                    "Response_3": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate"
                }
              },
              "else": {
                "actions": {
                  "Condition_3": {
                    "actions": {
                      "Response_4": {
                        "inputs": {
                          "body": "Invalid User ID",
                          "statusCode": 400
                        },
                        "kind": "Http",
                        "runAfter": {},
                        "type": "Response"
                      },
                      "Terminate_2": {
                        "inputs": {
                          "runError": {
                            "code": "400",
                            "message": "Invalid User"
                          },
                          "runStatus": "Failed"
                        },
                        "runAfter": {
                          "Response_4": [
                            "Succeeded"
                          ]
                        },
                        "type": "Terminate"
                      }
                    },
                    "else": {
                      "actions": {
                        "Condition_4": {
                          "actions": {
                            "Response_5": {
                              "inputs": {
                                "body": "Bad Product ID",
                                "statusCode": 400
                              },
                              "kind": "Http",
                              "runAfter": {},
                              "type": "Response"
                            },
                            "Terminate_3": {
                              "inputs": {
                                "runStatus": "Succeeded"
                              },
                              "runAfter": {
                                "Response_5": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Terminate"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@outputs('ValidateProductID')['statusCode']",
                                    200
                                  ]
                                }
                              }
                            ]
                          },
                          "runAfter": {
                            "ValidateProductID": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "If"
                        },
                        "ValidateProductID": {
                          "inputs": {
                            "method": "GET",
                            "uri": "https://serverlessohproduct.trafficmanager.net/api/GetProduct?productId=@{triggerBody()?['productId']}"
                          },
                          "runAfter": {},
                          "type": "Http"
                        }
                      }
                    },
                    "expression": {
                      "and": [
                        {
                          "not": {
                            "equals": [
                              "@outputs('ValidateUserID')['statusCode']",
                              200
                            ]
                          }
                        }
                      ]
                    },
                    "runAfter": {
                      "ValidateUserID": [
                        "Succeeded",
                        "Failed"
                      ]
                    },
                    "type": "If"
                  },
                  "ValidateUserID": {
                    "inputs": {
                      "method": "GET",
                      "uri": "https://serverlessohuser.trafficmanager.net/api/GetUser?userId=@{triggerBody()?['userId']}"
                    },
                    "runAfter": {},
                    "type": "Http"
                  }
                }
              },
              "expression": {
                "or": [
                  {
                    "equals": [
                      "@triggerBody()?['rating']",
                      "@null"
                    ]
                  },
                  {
                    "greater": [
                      "@triggerBody()?['rating']",
                      5
                    ]
                  },
                  {
                    "less": [
                      "@triggerBody()?['rating']",
                      0
                    ]
                  }
                ]
              },
              "runAfter": {},
              "type": "If"
            },
            "Execute_a_SQL_query_(V2)": {
              "inputs": {
                "body": {
                  "query": "insert into userratings (id,userid,productid,locationname,rating,usernotes)\n\n values ('@{variables('id')}','@{triggerBody()?['userId']}','@{triggerBody()?['productId']}','@{triggerBody()?['locationName']}',@{triggerBody()?['rating']},'@{triggerBody()?['userNotes']}');"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('team32sql.database.windows.net'))},@{encodeURIComponent(encodeURIComponent('team32sql'))}/query/sql"
              },
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            },
            "Execute_a_SQL_query_(V2)_2": {
              "inputs": {
                "body": {
                  "query": "select * from userratings where id = '@{variables('id')}'"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('team32sql.database.windows.net'))},@{encodeURIComponent(encodeURIComponent('team32sql'))}/query/sql"
              },
              "runAfter": {
                "Execute_a_SQL_query_(V2)": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            },
            "Initialize_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "id",
                    "type": "string",
                    "value": "@{guid()}"
                  }
                ]
              },
              "runAfter": {
                "Condition_2": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "request": {
              "inputs": {
                "method": "POST",
                "schema": {
                  "properties": {
                    "locationName": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "rating": {
                      "type": "integer"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "userNotes": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "kind": "Http",
              "type": "Request"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "/subscriptions/928af59a-1cfb-4902-9eeb-efde471b8a21/resourceGroups/OpenHackRG/providers/Microsoft.Web/connections/sql",
                "connectionName": "sql",
                "id": "/subscriptions/928af59a-1cfb-4902-9eeb-efde471b8a21/providers/Microsoft.Web/locations/westus/managedApis/sql"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('sql_1_Connection_Name'))]"
      ]
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2018-07-01-preview",
      "name": "[parameters('sql_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'sql')]"
        },
        "displayName": "[parameters('sql_1_Connection_DisplayName')]",
        "parameterValues": {
          "server": "[parameters('sql_1_server')]",
          "database": "[parameters('sql_1_database')]",
          "username": "[parameters('sql_1_username')]",
          "password": "[parameters('sql_1_password')]",
          "encryptConnection": "[parameters('sql_1_encryptConnection')]",
          "privacySetting": "[parameters('sql_1_privacySetting')]",
          "sqlConnectionString": "[parameters('sql_1_sqlConnectionString')]"
        }
      }
    }
  ],
  "outputs": {}
}